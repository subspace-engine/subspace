// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package engine is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Action
	ServerUpdate
	Sound
*/
package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// actions taken by a client
type Action struct {
	Desc string `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
	// a client replies with a list of sounds it does not have yet by making a new instance or mutating the received list
	SoundRequest []string `protobuf:"bytes,2,rep,name=SoundRequest" json:"SoundRequest,omitempty"`
	// Actions should be registered in the game content. todo: possibly send along metadata (what format?)
	Action uint32 `protobuf:"varint,3,opt,name=Action" json:"Action,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Action) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Action) GetSoundRequest() []string {
	if m != nil {
		return m.SoundRequest
	}
	return nil
}

func (m *Action) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

type ServerUpdate struct {
	Desc string `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
	// servers send a list of all sounds a game has at startup
	AllSounds []string `protobuf:"bytes,2,rep,name=AllSounds" json:"AllSounds,omitempty"`
	// servers construct SoundData at the request of a client
	// Clients do not have to expect SoundData unless a request for it have been made
	Sounds []*Sound `protobuf:"bytes,3,rep,name=Sounds" json:"Sounds,omitempty"`
}

func (m *ServerUpdate) Reset()                    { *m = ServerUpdate{} }
func (m *ServerUpdate) String() string            { return proto.CompactTextString(m) }
func (*ServerUpdate) ProtoMessage()               {}
func (*ServerUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerUpdate) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ServerUpdate) GetAllSounds() []string {
	if m != nil {
		return m.AllSounds
	}
	return nil
}

func (m *ServerUpdate) GetSounds() []*Sound {
	if m != nil {
		return m.Sounds
	}
	return nil
}

type Sound struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Sound) Reset()                    { *m = Sound{} }
func (m *Sound) String() string            { return proto.CompactTextString(m) }
func (*Sound) ProtoMessage()               {}
func (*Sound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Sound) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sound) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Action)(nil), "engine.Action")
	proto.RegisterType((*ServerUpdate)(nil), "engine.ServerUpdate")
	proto.RegisterType((*Sound)(nil), "engine.Sound")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageStream service

type MessageStreamClient interface {
	UpdateStream(ctx context.Context, opts ...grpc.CallOption) (MessageStream_UpdateStreamClient, error)
}

type messageStreamClient struct {
	cc *grpc.ClientConn
}

func NewMessageStreamClient(cc *grpc.ClientConn) MessageStreamClient {
	return &messageStreamClient{cc}
}

func (c *messageStreamClient) UpdateStream(ctx context.Context, opts ...grpc.CallOption) (MessageStream_UpdateStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageStream_serviceDesc.Streams[0], c.cc, "/engine.MessageStream/UpdateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageStreamUpdateStreamClient{stream}
	return x, nil
}

type MessageStream_UpdateStreamClient interface {
	Send(*Action) error
	Recv() (*ServerUpdate, error)
	grpc.ClientStream
}

type messageStreamUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *messageStreamUpdateStreamClient) Send(m *Action) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageStreamUpdateStreamClient) Recv() (*ServerUpdate, error) {
	m := new(ServerUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageStream service

type MessageStreamServer interface {
	UpdateStream(MessageStream_UpdateStreamServer) error
}

func RegisterMessageStreamServer(s *grpc.Server, srv MessageStreamServer) {
	s.RegisterService(&_MessageStream_serviceDesc, srv)
}

func _MessageStream_UpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageStreamServer).UpdateStream(&messageStreamUpdateStreamServer{stream})
}

type MessageStream_UpdateStreamServer interface {
	Send(*ServerUpdate) error
	Recv() (*Action, error)
	grpc.ServerStream
}

type messageStreamUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *messageStreamUpdateStreamServer) Send(m *ServerUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageStreamUpdateStreamServer) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.MessageStream",
	HandlerType: (*MessageStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateStream",
			Handler:       _MessageStream_UpdateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xc9, 0x56, 0x0b, 0x1d, 0x1b, 0x0f, 0x41, 0x24, 0x88, 0x87, 0x10, 0x10, 0x72, 0xaa,
	0xb2, 0x5e, 0xbc, 0x2e, 0x78, 0xf1, 0xa0, 0x87, 0x14, 0xc1, 0x6b, 0xdc, 0x0e, 0x65, 0x61, 0x9b,
	0xac, 0x49, 0xd6, 0xcf, 0x2f, 0x4d, 0x52, 0xff, 0x80, 0xb7, 0x37, 0x6f, 0xe0, 0xfd, 0x66, 0x1e,
	0xd0, 0x09, 0x43, 0x30, 0x23, 0x76, 0x07, 0xef, 0xa2, 0x63, 0x35, 0xda, 0x71, 0x67, 0x51, 0xbe,
	0x41, 0xbd, 0xd9, 0xc6, 0x9d, 0xb3, 0x8c, 0xc1, 0xc9, 0x80, 0x61, 0xcb, 0x89, 0x20, 0xaa, 0xd1,
	0x49, 0x33, 0x09, 0x6d, 0xef, 0x8e, 0x76, 0xd0, 0xf8, 0x71, 0xc4, 0x10, 0xf9, 0x4a, 0x54, 0xaa,
	0xd1, 0x7f, 0x3c, 0x76, 0xb9, 0x24, 0xf0, 0x4a, 0x10, 0x45, 0x75, 0x99, 0xe4, 0x08, 0x6d, 0x8f,
	0xfe, 0x13, 0xfd, 0xeb, 0x61, 0x30, 0x11, 0xff, 0xcd, 0xbf, 0x86, 0x66, 0xb3, 0xdf, 0xa7, 0xb8,
	0x50, 0xc2, 0x7f, 0x0c, 0x76, 0x03, 0x75, 0x59, 0x55, 0xa2, 0x52, 0x67, 0x6b, 0xda, 0xe5, 0xa3,
	0xbb, 0xcc, 0x2f, 0x4b, 0x79, 0x0b, 0xa7, 0x49, 0xcd, 0x84, 0x17, 0x33, 0xe1, 0x42, 0x98, 0xf5,
	0xec, 0x3d, 0x9a, 0x68, 0xf8, 0x4a, 0x10, 0xd5, 0xea, 0xa4, 0xd7, 0x4f, 0x40, 0x9f, 0x73, 0x19,
	0x7d, 0xf4, 0x68, 0x26, 0xf6, 0x00, 0x6d, 0x3e, 0xb2, 0xcc, 0xe7, 0x0b, 0x28, 0xbf, 0x72, 0x75,
	0xf1, 0x0d, 0xfe, 0xf5, 0x90, 0x22, 0x77, 0xe4, 0xbd, 0x4e, 0x6d, 0xde, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x2b, 0xb0, 0x6d, 0xed, 0x5e, 0x01, 0x00, 0x00,
}
