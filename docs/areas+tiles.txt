Initial requirements and design for areas and tiles

Willem Venter

The minimum requirements of a game world / area architecture. Feel free to add comments or changes and let me know what I've forgotten.

definitions:
- World: A 3d spacial representation of an environment.
- tile: The smallest possible sub-area in a world.
- area: A subset of the tiles of the world designating focus or visibility for an object.
- Type: A set of attributes with default initial values.
- Object: An instance of a type.

requirements:
- Represent a fixed-size 3d world.
- Specify world size at creation time.
- Allow parts of the game world to be rendered in more detail dynamically
- Support loading and unloading of multiple worlds in the same game
- Have a scalable way for a world to contain optionally nested objects (both movable and static). 
- allow the definition of "rules" that specify behaviour of objects in the world and the effects on objects.
- Have a list of built-in types that can be customised.
- Types and objects must be easily modifiable
- Attributes and nested objects must be able to be hidden

All of the rest are just implementation details.

design:
- world is divided into sectors. It is up to the game designer to decide how big sectors need to be.
- Each world sector has a type. Game developers can decide what types mean, but generally it is meant for things like terrain (example: ground, air, water etc). The sector type can be used when evaluating the world rules. The type must be able to change. Representation can either be a single byte slice or slices of byte slices, where a byte is the sector type.
- Objects can be stored in a structure that directly overlays the sector type world "map". In other words, if the object is located at 1,1,1, its terrain type would be the same type as the tile at 1,1,1. How the objects will be represented is still undecided, but initial thoughts are that all objects for an n by n by n group of sectors can be held in the same data structure. The value of n will depend on how sparse objects are relative to the size of the world, but there must be an easy way to notify other selected objects of changes (e.g. movement for objects "near" it) and changes in the world.

sub features:
Areas:
-purpose: player point of view and sound environment, application of distance-based effects based on location, possibly collision detection,
- Definition: An area is a filtered selection of objects in the world with the primary criteria being object location, but other filters, such as terrain must also be possible.

world objects:
- At a minimum an object is a mapping of attribute name to some value. Objects also have “children, for when sub objects are (e.g. on a moving platform or in a container). Game logic should exist outside the representation. Instead, object modifiers can expect objects to contain certain attributes based on an ID or similar primary identifier. Logic takes an object as parameter and then changes the values inside the object as a result of the logic.

